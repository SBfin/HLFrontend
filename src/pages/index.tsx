import { useState, useEffect } from 'react';
import { useWriteContract, useTransaction, useConfig } from 'wagmi';
import { BONDING_CURVE_FACTORY_ADDRESS } from '../constants'; // You'll need to create this
import { abiBondingCurveFactory } from '../abi/BondingCurveFactory';
import { abiBondingCurveToken } from '../abi/BondingCurveToken';
import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { getTransactionReceipt } from '@wagmi/core';

const Home: NextPage = () => {
  const config = useConfig();
  const [tokenName, setTokenName] = useState('');
  const [tokenSymbol, setTokenSymbol] = useState('');

  const { data: hash, writeContract } = useWriteContract();

  useEffect(() => {
    const getReceipt = async () => {
      if (hash) {
        console.log('Transaction hash:', hash);
        const receipt = await getTransactionReceipt(config, { hash });
        console.log('Transaction receipt:', receipt);
      }
    };
    
    getReceipt();
  }, [hash]);

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <div className={styles.header}>
          <h1 className={styles.title}>
            Welcome to <span className={styles.highlight}>PumpClone</span>
          </h1>
          <ConnectButton />
        </div>

        <section className={styles.getStarted}>
          <p>Get started by launching a new token</p>
          
          <div className={styles.inputContainer}>
            <div className={styles.inputGroup}>
              <label htmlFor="tokenName">Token Name</label>
              <input
                id="tokenName"
                type="text"
                placeholder="Enter token name"
                value={tokenName}
                onChange={(e) => setTokenName(e.target.value)}
                className={styles.input}
              />
            </div>
            
            <div className={styles.inputGroup}>
              <label htmlFor="tokenSymbol">Token Symbol</label>
              <input
                id="tokenSymbol"
                type="text"
                placeholder="Enter token symbol"
                value={tokenSymbol}
                onChange={(e) => setTokenSymbol(e.target.value)}
                className={styles.input}
              />
            </div>
          </div>
          
          <button 
            onClick={async () => {
              try {
                await writeContract({ 
                  abi: abiBondingCurveFactory,
                  address: BONDING_CURVE_FACTORY_ADDRESS,
                  functionName: 'createToken',
                  args: [tokenName, tokenSymbol]
                });
              } catch (error: any) {
                console.error('Detailed error:', error);
                // Often the revert reason is in error.cause or error.message
              }
            }}
            className={`${styles.createButton} ${styles.launchButton}`}
          >
            Launch Token
          </button>
        </section>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

export default Home;
